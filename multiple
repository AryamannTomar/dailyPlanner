// app/page.tsx
import React, { useState } from "react";
import DayCard from "@/components/day-card";
import { getISODateString } from "@/utils/date";

export default function HomePage() {
  const [tasksByDate, setTasksByDate] = useState<{ [key: string]: Task[] }>({});

  const handleAddTask = (dateISO: string, task: Task) => {
    setTasksByDate((prev) => {
      const next = { ...prev };
      const list = next[dateISO] || [];
      next[dateISO] = [...list, task];
      return next;
    });
  };

  const handleDeleteTask = (dateISO: string, taskId: string) => {
    setTasksByDate((prev) => {
      const next = { ...prev };
      const list = next[dateISO] || [];
      next[dateISO] = list.filter((t) => t.id !== taskId);
      return next;
    });
  };

  const handleToggleComplete = (dateISO: string, taskId: string, completed: boolean) => {
    setTasksByDate((prev) => {
      const next = { ...prev };
      const list = next[dateISO] || [];
      next[dateISO] = list.map((t) =>
        t.id === taskId ? { ...t, completed } : t
      );
      return next;
    });
  };

  const handleUpdateEndTime = (dateISO: string, taskId: string, newEndTime: string) => {
    setTasksByDate((prev) => {
      const next = { ...prev };
      const list = next[dateISO] || [];
      next[dateISO] = list.map((t) =>
        t.id === taskId ? { ...t, endTime: newEndTime } : t
      );
      return next;
    });
  };

  const weekDates = Array.from({ length: 7 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() + i);
    return date;
  });

  return (
    <div className="grid grid-cols-7 gap-4">
      {weekDates.map((date) => {
        const iso = getISODateString(date);
        const tasks = tasksByDate[iso] || [];
        return (
          <DayCard
            key={iso}
            date={date}
            tasks={tasks}
            onAddTask={(task) => handleAddTask(iso, task)}
            onToggleComplete={(id, completed) =>
              handleToggleComplete(iso, id, completed)
            }
            onUpdateEndTime={(id, newTime) =>
              handleUpdateEndTime(iso, id, newTime)
            }
            onDeleteTask={(id) => handleDeleteTask(iso, id)}
          />
        );
      })}
    </div>
  );
}

// components/day-card.tsx
import React from "react";
import TaskList from "@/components/task-list";
import { Task } from "@/types/task";

interface DayCardProps {
  date: Date;
  tasks: Task[];
  onAddTask: (task: Task) => void;
  onToggleComplete: (taskId: string, completed: boolean) => void;
  onUpdateEndTime: (taskId: string, newEndTime: string) => void;
  onDeleteTask: (taskId: string) => void;
}

export default function DayCard({
  date,
  tasks,
  onAddTask,
  onToggleComplete,
  onUpdateEndTime,
  onDeleteTask,
}: DayCardProps) {
  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      <h2 className="text-lg font-bold mb-4">{date.toDateString()}</h2>
      <TaskList
        tasks={tasks}
        onToggleComplete={onToggleComplete}
        onUpdateEndTime={onUpdateEndTime}
        onDelete={(id) => onDeleteTask(id)}
      />
    </div>
  );
}

// components/task-list.tsx
import React from "react";
import { cn } from "@/utils/cn";
import { Task } from "@/types/task";
import { Button } from "@/components/ui/button";
import { Trash2 } from 'lucide-react';

interface TaskListProps {
  tasks?: Task[];
  onToggleComplete: (taskId: string, completed: boolean) => void;
  onUpdateEndTime: (taskId: string, newEndTime: string) => void;
  onDelete: (taskId: string) => void;
}

export default function TaskList({
  tasks = [],
  onToggleComplete,
  onUpdateEndTime,
  onDelete,
}: TaskListProps) {
  return (
    <ul className="space-y-2">
      {tasks.map((task) => {
        const startLabel = task.startTime ? task.startTime : "No start time";
        const endLabel = task.endTime ? task.endTime : "No end time";
        return (
          <li
            key={task.id}
            className={cn(
              "group flex items-start gap-3 rounded-xl border p-3 shadow-sm transition-colors hover:border-neutral-300",
              task.completed ? "bg-neutral-50" : "bg-white",
            )}
          >
            <Button
              type="button"
              variant="ghost"
              size="icon"
              onClick={() => onDelete(task.id)}
              aria-label="Delete task"
              title="Delete task"
              className="h-7 w-7 mt-0.5 text-neutral-400 hover:text-red-600 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-400"
            >
              <Trash2 className="h-4 w-4" />
            </Button>

            <div className="w-18 shrink-0 text-xs font-medium text-muted-foreground tabular-nums">
              {startLabel}
            </div>
            <div className="flex-1">
              <div className="text-sm font-medium">{task.title}</div>
              <div className="text-xs text-muted-foreground">{endLabel}</div>
            </div>
            <div className="shrink-0">
              <input
                type="checkbox"
                checked={task.completed}
                onChange={(e) =>
                  onToggleComplete(task.id, e.target.checked)
                }
                className="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-300 focus:ring-2"
              />
            </div>
          </li>
        );
      })}
    </ul>
  );
}
