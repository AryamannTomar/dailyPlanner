// app/page.tsx
import React, { useState } from "react";
import DayCard from "@/components/day-card";
import TaskList from "@/components/task-list";
import ThemeToggle from "@/components/theme-toggle";
import { Task, CategoryState, CategoryKey, AddableTask } from "@/types";
import { bgBackground } from "@/styles/theme"; // Assuming theme tokens are imported from a styles file

export default function Page() {
  const [tasksByDate, setTasksByDate] = useState<{ [key: string]: Task[] }>({});

  function handleDeleteTask(dateISO: string, taskId: string) {
    setTasksByDate((prev) => {
      const next = { ...prev };
      const list = next[dateISO] || [];
      next[dateISO] = list.filter((t) => t.id !== taskId);
      return next;
    });
  }

  return (
    <div className="min-h-screen bg-background flex flex-col">
      <header className="sticky top-0 z-10 border-b bg-background/70 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        {/* Render header content here */}
        <ThemeToggle />
      </header>
      {/* Render DayCard components here */}
      <DayCard
        date={new Date()}
        dateISO="2023-10-01"
        tasks={tasksByDate["2023-10-01"] || []}
        categories={{ work: true, personal: false }}
        isToday={true}
        onToggleComplete={(taskId, completed) => {}}
        onAddTask={(task) => {}}
        onToggleCategory={(key, value) => {}}
        onUpdateEndTime={(taskId, newEndTime) => {}}
        onDeleteTask={(id) => handleDeleteTask("2023-10-01", id)}
      />
    </div>
  );
}

// components/day-card.tsx
import React from "react";
import TaskList from "@/components/task-list";
import { Task, CategoryState, CategoryKey } from "@/types";

export default function DayCard({
  date,
  dateISO,
  tasks,
  categories,
  isToday = false,
  onToggleComplete,
  onAddTask,
  onToggleCategory,
  onUpdateEndTime,
  onDeleteTask,
}: {
  date: Date;
  dateISO: string;
  tasks: Task[];
  categories: CategoryState;
  isToday?: boolean;
  onToggleComplete: (taskId: string, completed: boolean) => void;
  onAddTask: (task: AddableTask) => void;
  onToggleCategory: (key: CategoryKey, value: boolean) => void;
  onUpdateEndTime: (taskId: string, newEndTime: string) => void;
  onDeleteTask: (taskId: string) => void;
}) {
  return (
    <div>
      {/* Render DayCard content here */}
      <TaskList
        tasks={tasks}
        onToggleComplete={(id, completed) => onToggleComplete(id, completed)}
        onUpdateEndTime={(id, newTime) => onUpdateEndTime(id, newTime)}
        onDelete={(id) => onDeleteTask(id)}
      />
    </div>
  );
}

// components/task-list.tsx
import React from "react";
import { Button } from "@/components/ui/button";
import { Trash2 } from 'lucide-react';
import { Task } from "@/types";
import cn from "classnames";

export default function TaskList({
  tasks = [],
  onToggleComplete,
  onUpdateEndTime,
  onDelete,
}: {
  tasks?: Task[];
  onToggleComplete: (taskId: string, completed: boolean) => void;
  onUpdateEndTime: (taskId: string, newEndTime: string) => void;
  onDelete: (taskId: string) => void;
}) {
  return (
    <ul>
      {tasks.map((task) => (
        <li
          key={task.id}
          className={cn(
            "group flex items-start gap-3 rounded-xl border p-3 shadow-sm transition-colors hover:border-neutral-300",
            task.completed ? "bg-neutral-50" : "bg-white",
          )}
        >
          <Button
            type="button"
            variant="ghost"
            size="icon"
            onClick={() => onDelete(task.id)}
            aria-label="Delete task"
            title="Delete task"
            className="h-7 w-7 mt-0.5 text-neutral-400 hover:text-red-600 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-400"
          >
            <Trash2 className="h-4 w-4" />
          </Button>

          <div className="w-18 shrink-0 text-xs font-medium text-muted-foreground tabular-nums">
            {task.startTime}
          </div>
          <input
            type="checkbox"
            checked={task.completed}
            onChange={(e) => onToggleComplete(task.id, e.target.checked)}
            className="h-4 w-4 rounded border-neutral-300 text-neutral-900 focus:ring-neutral-900"
          />
          <div className="flex flex-1 items-center justify-between space-x-2">
            <div className="flex-1">
              <p className="line-clamp-1 text-sm font-medium leading-none">
                {task.title}
              </p>
              <p className="text-xs text-muted-foreground">{task.description}</p>
            </div>
            <div className="text-xs text-muted-foreground">
              {task.endTime}
            </div>
          </div>
        </li>
      ))}
    </ul>
  );
}

// app/layout.tsx
import React from "react";
import { ThemeProvider } from "next-themes";
import "@/styles/globals.css";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <ThemeProvider attribute="class" defaultTheme="light" enableSystem={false} disableTransitionOnChange>
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}
